<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'img')
            ->addSelect('img')
            ->leftJoin('a.categories', 'cat')
            ->addSelect('cat')
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
            ->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query);
    }

    /**
     * Récupère les annonces selon un liste de catégories
     *
     * @param array $categoryName
     *
     * @return mixed
     */
    public function getAdvertWithCategories(array $categoryName)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.categories', 'c')
            ->addSelect('c');

        $qb->where($qb->expr()->in('c.name', $categoryName));

        return $qb->getQuery()->getResult();
    }

    public function myFindAll()
    {
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Julien');

        $this->whereCurrentYear($qb);

        $qb->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->where('a.id = :id')
            ->setParameter('id', $id);

        return $qb
            ->getQuery()
            ->getSingleResult();
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date = :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \DateTime(date('Y').'-01-01'))
            ->setParameter('end', new \DateTime(date('Y').'-12-31'));
    }

    public function getAdvertsForMenu($limit)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function purgeOutdatedAdverts(int $days)
    {
        $purgeDate = new \DateTime('-'.$days.' month');

        $query = $this
            ->createQueryBuilder('a')
            ->where('a.updatedAt <= :date')
            ->setParameter('date', $purgeDate)
            ->andWhere('a.applications IS EMPTY')
            ->getQuery();

        return $query->getResult();
    }
}
